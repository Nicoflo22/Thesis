{"cells":[{"cell_type":"markdown","metadata":{"id":"00Wr03zJueGO"},"source":["# Imports"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"42b_ZunlvXw_","executionInfo":{"status":"ok","timestamp":1690804616383,"user_tz":-120,"elapsed":18771,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}},"outputId":"b31c4ded-f2fb-4529-9f4a-a49c8c21e296"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["pip install -r /content/drive/MyDrive/requirements.txt\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2fHxfX0wzDg1","executionInfo":{"status":"ok","timestamp":1690804622146,"user_tz":-120,"elapsed":5767,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}},"outputId":"d133a956-5040-4d8b-c881-683b42ad608d"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from -r /content/drive/MyDrive/requirements.txt (line 1)) (1.5.3)\n","Requirement already satisfied: openpyxl in /usr/local/lib/python3.10/dist-packages (from -r /content/drive/MyDrive/requirements.txt (line 2)) (3.0.10)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from -r /content/drive/MyDrive/requirements.txt (line 3)) (1.22.4)\n","Collecting neurokit2 (from -r /content/drive/MyDrive/requirements.txt (line 4))\n","  Downloading neurokit2-0.2.5-py2.py3-none-any.whl (1.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.3/1.3 MB\u001b[0m \u001b[31m15.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from -r /content/drive/MyDrive/requirements.txt (line 5)) (3.7.1)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from -r /content/drive/MyDrive/requirements.txt (line 6)) (4.65.0)\n","Requirement already satisfied: tensorflow in /usr/local/lib/python3.10/dist-packages (from -r /content/drive/MyDrive/requirements.txt (line 7)) (2.12.0)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from -r /content/drive/MyDrive/requirements.txt (line 8)) (1.2.2)\n","Collecting wfdb (from -r /content/drive/MyDrive/requirements.txt (line 9))\n","  Downloading wfdb-4.1.2-py3-none-any.whl (159 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m160.0/160.0 kB\u001b[0m \u001b[31m19.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from -r /content/drive/MyDrive/requirements.txt (line 10)) (1.10.1)\n","Requirement already satisfied: imbalanced-learn in /usr/local/lib/python3.10/dist-packages (from -r /content/drive/MyDrive/requirements.txt (line 11)) (0.10.1)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas->-r /content/drive/MyDrive/requirements.txt (line 1)) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->-r /content/drive/MyDrive/requirements.txt (line 1)) (2022.7.1)\n","Requirement already satisfied: et-xmlfile in /usr/local/lib/python3.10/dist-packages (from openpyxl->-r /content/drive/MyDrive/requirements.txt (line 2)) (1.1.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->-r /content/drive/MyDrive/requirements.txt (line 5)) (1.1.0)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->-r /content/drive/MyDrive/requirements.txt (line 5)) (0.11.0)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->-r /content/drive/MyDrive/requirements.txt (line 5)) (4.41.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->-r /content/drive/MyDrive/requirements.txt (line 5)) (1.4.4)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->-r /content/drive/MyDrive/requirements.txt (line 5)) (23.1)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->-r /content/drive/MyDrive/requirements.txt (line 5)) (9.4.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->-r /content/drive/MyDrive/requirements.txt (line 5)) (3.1.0)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (1.6.3)\n","Requirement already satisfied: flatbuffers>=2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (23.5.26)\n","Requirement already satisfied: gast<=0.4.0,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (0.4.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (0.2.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (1.56.2)\n","Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (3.8.0)\n","Requirement already satisfied: jax>=0.3.15 in /usr/local/lib/python3.10/dist-packages (from tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (0.4.13)\n","Requirement already satisfied: keras<2.13,>=2.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (2.12.0)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (16.0.6)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (3.3.0)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (3.20.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (67.7.2)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (1.16.0)\n","Requirement already satisfied: tensorboard<2.13,>=2.12 in /usr/local/lib/python3.10/dist-packages (from tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (2.12.3)\n","Requirement already satisfied: tensorflow-estimator<2.13,>=2.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (2.12.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (2.3.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (4.7.1)\n","Requirement already satisfied: wrapt<1.15,>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (1.14.1)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (0.32.0)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->-r /content/drive/MyDrive/requirements.txt (line 8)) (1.3.1)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->-r /content/drive/MyDrive/requirements.txt (line 8)) (3.2.0)\n","Requirement already satisfied: SoundFile>=0.10.0 in /usr/local/lib/python3.10/dist-packages (from wfdb->-r /content/drive/MyDrive/requirements.txt (line 9)) (0.12.1)\n","Requirement already satisfied: requests>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from wfdb->-r /content/drive/MyDrive/requirements.txt (line 9)) (2.27.1)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (0.41.0)\n","Requirement already satisfied: ml-dtypes>=0.1.0 in /usr/local/lib/python3.10/dist-packages (from jax>=0.3.15->tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (0.2.0)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.8.1->wfdb->-r /content/drive/MyDrive/requirements.txt (line 9)) (1.26.16)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.8.1->wfdb->-r /content/drive/MyDrive/requirements.txt (line 9)) (2023.7.22)\n","Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests>=2.8.1->wfdb->-r /content/drive/MyDrive/requirements.txt (line 9)) (2.0.12)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.8.1->wfdb->-r /content/drive/MyDrive/requirements.txt (line 9)) (3.4)\n","Requirement already satisfied: cffi>=1.0 in /usr/local/lib/python3.10/dist-packages (from SoundFile>=0.10.0->wfdb->-r /content/drive/MyDrive/requirements.txt (line 9)) (1.15.1)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (2.17.3)\n","Requirement already satisfied: google-auth-oauthlib<1.1,>=0.5 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (1.0.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (3.4.4)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (0.7.1)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.13,>=2.12->tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (2.3.6)\n","Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.0->SoundFile>=0.10.0->wfdb->-r /content/drive/MyDrive/requirements.txt (line 9)) (2.21)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (5.3.1)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (0.3.0)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (4.9)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib<1.1,>=0.5->tensorboard<2.13,>=2.12->tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (1.3.1)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.13,>=2.12->tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (2.1.3)\n","Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (0.5.0)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<1.1,>=0.5->tensorboard<2.13,>=2.12->tensorflow->-r /content/drive/MyDrive/requirements.txt (line 7)) (3.2.2)\n","Installing collected packages: wfdb, neurokit2\n","Successfully installed neurokit2-0.2.5 wfdb-4.1.2\n"]}]},{"cell_type":"code","execution_count":3,"metadata":{"id":"f4P0sxfoueGR","executionInfo":{"status":"ok","timestamp":1690804626094,"user_tz":-120,"elapsed":3951,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"outputs":[],"source":["#import tensorflow as tf\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","#import seaborn as sns\n","import os\n","import wfdb\n","from scipy import signal\n","from sklearn.preprocessing import MultiLabelBinarizer\n","from sklearn.model_selection import train_test_split\n","#from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from sklearn.model_selection import train_test_split\n","import neurokit2 as nk\n","from sklearn.preprocessing import MinMaxScaler\n","from scipy.signal import butter, lfilter, freqz, iirnotch\n","\n","import tensorflow as tf\n","from tensorflow.keras import layers\n","\n","# pd.set_option('display.max_columns', None)  # Show all columns\n","# pd.set_option('display.expand_frame_repr', False)  # Disable wrapping\n","# pd.set_option('display.max_colwidth', None)  # Show full contents of each cell\n","\n","pd.reset_option('display.max_columns')  # Show all columns\n","pd.reset_option('display.expand_frame_repr')  # Disable wrapping\n","pd.reset_option('display.max_colwidth')  # Show full contents of each cell\n"]},{"cell_type":"markdown","metadata":{"id":"d0DgnqhlueGT"},"source":["# Load data\n"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":641},"id":"4kxxnSbUueGT","executionInfo":{"status":"ok","timestamp":1690804653725,"user_tz":-120,"elapsed":27635,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}},"outputId":"806b1292-6642-4209-869b-e36f9719b54f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                     record_name superclass  \\\n","0      records500/00000/00001_hr   ['NORM']   \n","1      records500/00000/00002_hr   ['NORM']   \n","2      records500/00000/00003_hr   ['NORM']   \n","3      records500/00000/00004_hr   ['NORM']   \n","4      records500/00000/00005_hr   ['NORM']   \n","...                          ...        ...   \n","16239  records500/21000/21833_hr   ['STTC']   \n","16240  records500/21000/21834_hr   ['NORM']   \n","16241  records500/21000/21835_hr   ['STTC']   \n","16242  records500/21000/21836_hr   ['NORM']   \n","16243  records500/21000/21837_hr   ['NORM']   \n","\n","                                                  signal    age  sex  \n","0      [[-0.08588371897207263, -0.03736346853162483, ...   56.0    1  \n","1      [[-0.011243299508205044, 0.09023407534582495, ...   19.0    0  \n","2      [[-0.02596508144425195, -0.052584897690685514,...   37.0    1  \n","3      [[-0.04137347387754445, -0.11622565135690588, ...   24.0    0  \n","4      [[-0.03003880948325483, -0.43121334841072106, ...   19.0    1  \n","...                                                  ...    ...  ...  \n","16239  [[-0.04391078902957227, -0.02257351658386932, ...   67.0    1  \n","16240  [[-0.026419722051677138, 0.0036079393377764384...  300.0    0  \n","16241  [[0.06267955458986217, 0.0552252383461329, -0....   59.0    1  \n","16242  [[-0.03373067418018933, -0.02617115333028704, ...   64.0    1  \n","16243  [[-0.03745155669436234, -0.022392895272037833,...   68.0    0  \n","\n","[16244 rows x 5 columns]"],"text/html":["\n","\n","  <div id=\"df-e063094c-4cf0-40a7-9a99-74c055d104ad\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>record_name</th>\n","      <th>superclass</th>\n","      <th>signal</th>\n","      <th>age</th>\n","      <th>sex</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>records500/00000/00001_hr</td>\n","      <td>['NORM']</td>\n","      <td>[[-0.08588371897207263, -0.03736346853162483, ...</td>\n","      <td>56.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>records500/00000/00002_hr</td>\n","      <td>['NORM']</td>\n","      <td>[[-0.011243299508205044, 0.09023407534582495, ...</td>\n","      <td>19.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>records500/00000/00003_hr</td>\n","      <td>['NORM']</td>\n","      <td>[[-0.02596508144425195, -0.052584897690685514,...</td>\n","      <td>37.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>records500/00000/00004_hr</td>\n","      <td>['NORM']</td>\n","      <td>[[-0.04137347387754445, -0.11622565135690588, ...</td>\n","      <td>24.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>records500/00000/00005_hr</td>\n","      <td>['NORM']</td>\n","      <td>[[-0.03003880948325483, -0.43121334841072106, ...</td>\n","      <td>19.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>16239</th>\n","      <td>records500/21000/21833_hr</td>\n","      <td>['STTC']</td>\n","      <td>[[-0.04391078902957227, -0.02257351658386932, ...</td>\n","      <td>67.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>16240</th>\n","      <td>records500/21000/21834_hr</td>\n","      <td>['NORM']</td>\n","      <td>[[-0.026419722051677138, 0.0036079393377764384...</td>\n","      <td>300.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>16241</th>\n","      <td>records500/21000/21835_hr</td>\n","      <td>['STTC']</td>\n","      <td>[[0.06267955458986217, 0.0552252383461329, -0....</td>\n","      <td>59.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>16242</th>\n","      <td>records500/21000/21836_hr</td>\n","      <td>['NORM']</td>\n","      <td>[[-0.03373067418018933, -0.02617115333028704, ...</td>\n","      <td>64.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>16243</th>\n","      <td>records500/21000/21837_hr</td>\n","      <td>['NORM']</td>\n","      <td>[[-0.03745155669436234, -0.022392895272037833,...</td>\n","      <td>68.0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>16244 rows × 5 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e063094c-4cf0-40a7-9a99-74c055d104ad')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-a7246e7e-0a6a-4a15-883a-9ff79af771b6\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a7246e7e-0a6a-4a15-883a-9ff79af771b6')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-a7246e7e-0a6a-4a15-883a-9ff79af771b6 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e063094c-4cf0-40a7-9a99-74c055d104ad button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e063094c-4cf0-40a7-9a99-74c055d104ad');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":4}],"source":["# import os\n","# import pandas as pd\n","# import wfdb\n","\n","# # Load the CSV file\n","# superclass_df = pd.read_csv('superclass.csv')\n","\n","# # Initialize empty arrays to store the data\n","# data = []\n","\n","# # Specify the root directory\n","# root_dir = '../ptb-xl/ptb-xl-a-large-publicly-available-electrocardiography-dataset-1.0.3/'\n","\n","# # Loop over all records in the DataFrame\n","# for idx, row in superclass_df.iterrows():\n","#     if (idx+1)%100 == 0:\n","#         print(f\"Processing record {idx+1}/{len(superclass_df)}\")\n","#     # Get filename without extension\n","#     filename = os.path.splitext(row['filename_lr'])[0]\n","\n","#     # Construct the full path\n","#     full_path = os.path.join(root_dir, filename)\n","\n","#     # Load the raw ECG signal data from the .dat file\n","#     dat, fields = wfdb.rdsamp(full_path)\n","\n","#     # Load the labels data from the .hea file\n","#     hea = wfdb.rdheader(full_path)\n","\n","#     # Add data to the list\n","#     data.append({\n","#         'record_name': filename,\n","#         'superclass': row['diagnostic_superclass'],\n","#         'signal': dat,\n","#         'age': row['age'],\n","#         'sex': row['sex']\n","#     })\n","\n","# # Convert the list to a DataFrame\n","# df = pd.DataFrame(data)\n","\n","# # Save the DataFrame\n","# df.to_pickle('df_processed.pkl')\n","\n","df = pd.read_pickle('/content/drive/MyDrive/nico/df_processed_250.pkl')\n","df"]},{"cell_type":"code","source":[],"metadata":{"id":"IhTigUXfvVwA","executionInfo":{"status":"ok","timestamp":1690804653726,"user_tz":-120,"elapsed":6,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xzhDhmXWueGV"},"source":["# Preprocessing"]},{"cell_type":"markdown","metadata":{"id":"aoT0DdKdueGV"},"source":["## downsampling NORM class"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":641},"id":"dgVUaz1LueGV","executionInfo":{"status":"ok","timestamp":1690804654225,"user_tz":-120,"elapsed":504,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}},"outputId":"885b9ad8-6766-43bd-b708-7af871893dd2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                     record_name superclass  \\\n","0      records500/00000/00001_hr   ['NORM']   \n","2      records500/00000/00003_hr   ['NORM']   \n","7      records500/00000/00008_hr     ['MI']   \n","9      records500/00000/00010_hr   ['NORM']   \n","11     records500/00000/00012_hr   ['NORM']   \n","...                          ...        ...   \n","16235  records500/21000/21826_hr     ['MI']   \n","16236  records500/21000/21830_hr   ['NORM']   \n","16238  records500/21000/21832_hr     ['CD']   \n","16239  records500/21000/21833_hr   ['STTC']   \n","16241  records500/21000/21835_hr   ['STTC']   \n","\n","                                                  signal   age  sex  \n","0      [[-0.08588371897207263, -0.03736346853162483, ...  56.0    1  \n","2      [[-0.02596508144425195, -0.052584897690685514,...  37.0    1  \n","7      [[-0.029191385508134767, -0.05611670272285019,...  48.0    0  \n","9      [[-0.04884232917703562, -0.0901889111153408, -...  22.0    1  \n","11     [[0.1972585306084939, 0.2603701638378019, 0.06...  43.0    1  \n","...                                                  ...   ...  ...  \n","16235  [[-0.010193774422008913, 0.01224806477719749, ...  82.0    1  \n","16236  [[-0.06730370254978757, 0.03782162036429296, 0...  86.0    0  \n","16238  [[-0.05269679238427077, -0.022555283540224205,...  63.0    0  \n","16239  [[-0.04391078902957227, -0.02257351658386932, ...  67.0    1  \n","16241  [[0.06267955458986217, 0.0552252383461329, -0....  59.0    1  \n","\n","[10244 rows x 5 columns]"],"text/html":["\n","\n","  <div id=\"df-31596d3b-4388-478e-b2b8-a8b79a027fac\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>record_name</th>\n","      <th>superclass</th>\n","      <th>signal</th>\n","      <th>age</th>\n","      <th>sex</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>records500/00000/00001_hr</td>\n","      <td>['NORM']</td>\n","      <td>[[-0.08588371897207263, -0.03736346853162483, ...</td>\n","      <td>56.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>records500/00000/00003_hr</td>\n","      <td>['NORM']</td>\n","      <td>[[-0.02596508144425195, -0.052584897690685514,...</td>\n","      <td>37.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>records500/00000/00008_hr</td>\n","      <td>['MI']</td>\n","      <td>[[-0.029191385508134767, -0.05611670272285019,...</td>\n","      <td>48.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>records500/00000/00010_hr</td>\n","      <td>['NORM']</td>\n","      <td>[[-0.04884232917703562, -0.0901889111153408, -...</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>records500/00000/00012_hr</td>\n","      <td>['NORM']</td>\n","      <td>[[0.1972585306084939, 0.2603701638378019, 0.06...</td>\n","      <td>43.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>16235</th>\n","      <td>records500/21000/21826_hr</td>\n","      <td>['MI']</td>\n","      <td>[[-0.010193774422008913, 0.01224806477719749, ...</td>\n","      <td>82.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>16236</th>\n","      <td>records500/21000/21830_hr</td>\n","      <td>['NORM']</td>\n","      <td>[[-0.06730370254978757, 0.03782162036429296, 0...</td>\n","      <td>86.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>16238</th>\n","      <td>records500/21000/21832_hr</td>\n","      <td>['CD']</td>\n","      <td>[[-0.05269679238427077, -0.022555283540224205,...</td>\n","      <td>63.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>16239</th>\n","      <td>records500/21000/21833_hr</td>\n","      <td>['STTC']</td>\n","      <td>[[-0.04391078902957227, -0.02257351658386932, ...</td>\n","      <td>67.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>16241</th>\n","      <td>records500/21000/21835_hr</td>\n","      <td>['STTC']</td>\n","      <td>[[0.06267955458986217, 0.0552252383461329, -0....</td>\n","      <td>59.0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>10244 rows × 5 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-31596d3b-4388-478e-b2b8-a8b79a027fac')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-a4f813c7-8471-412d-9e67-b67d7dfaee8f\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a4f813c7-8471-412d-9e67-b67d7dfaee8f')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-a4f813c7-8471-412d-9e67-b67d7dfaee8f button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-31596d3b-4388-478e-b2b8-a8b79a027fac button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-31596d3b-4388-478e-b2b8-a8b79a027fac');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":5}],"source":["# Filter out the \"NORM\" class\n","\n","norm_df = df[df['superclass'] == '[\\'NORM\\']']\n","\n","# Randomly sample 6000 records from the \"NORM\" class to be removed\n","to_remove = norm_df.sample(6000, random_state=1)\n","\n","# Remove these from the original df\n","df = df.drop(to_remove.index)\n","df\n"]},{"cell_type":"markdown","metadata":{"id":"auc-_gXSueGW"},"source":["## Upsample lowest class"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":807},"id":"8aU6EcHKueGW","executionInfo":{"status":"ok","timestamp":1690804657319,"user_tz":-120,"elapsed":3102,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}},"outputId":"3c7940b4-39ec-4038-ca93-66840346eefb"},"outputs":[{"output_type":"stream","name":"stdout","text":["                     record_name superclass  \\\n","0      records500/00000/00001_hr   ['NORM']   \n","1      records500/00000/00003_hr   ['NORM']   \n","2      records500/00000/00008_hr     ['MI']   \n","3      records500/00000/00010_hr   ['NORM']   \n","4      records500/00000/00012_hr   ['NORM']   \n","...                          ...        ...   \n","11704  records500/11000/11847_hr    ['HYP']   \n","11705  records500/01000/01851_hr    ['HYP']   \n","11706  records500/08000/08766_hr    ['HYP']   \n","11707  records500/15000/15470_hr    ['HYP']   \n","11708  records500/20000/20607_hr    ['HYP']   \n","\n","                                                  signal   age  sex  \n","0      [[-0.08588371897207263, -0.03736346853162483, ...  56.0    1  \n","1      [[-0.02596508144425195, -0.052584897690685514,...  37.0    1  \n","2      [[-0.029191385508134767, -0.05611670272285019,...  48.0    0  \n","3      [[-0.04884232917703562, -0.0901889111153408, -...  22.0    1  \n","4      [[0.1972585306084939, 0.2603701638378019, 0.06...  43.0    1  \n","...                                                  ...   ...  ...  \n","11704  [[-0.04933608124644776, -0.10538589375587953, ...  71.0    1  \n","11705  [[0.015299943875268653, 0.3489574946327841, 0....  79.0    1  \n","11706  [[-0.09354560845722096, -0.2154623788971811, -...  60.0    1  \n","11707  [[-0.1278517588117213, 0.03778699999254446, -0...  72.0    0  \n","11708  [[-0.0076176861574226845, -0.10097023408838335...  85.0    0  \n","\n","[11709 rows x 5 columns]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x300 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x300 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import numpy as np\n","from sklearn.utils import resample\n","\n","def add_noise(data, noise_factor=0.05):\n","    noise = np.random.normal(size=data.shape)\n","    augmented_data = data + noise_factor * noise\n","    return augmented_data\n","\n","# Separate the 'HYP' class\n","hyp_df = df[df['superclass'] == '[\\'HYP\\']']\n","\n","# Determine how many instances you need to resample\n","n_samples = 2000  # adjust this value as needed\n","\n","# Resample the 'HYP' class\n","hyp_upsampled = resample(hyp_df,\n","                         replace=True,  # sample with replacement\n","                         n_samples=n_samples,  # to match number in majority class\n","                         random_state=1)  # reproducible results\n","\n","# Add noise to the resampled 'HYP' data\n","# Assuming 'ecg_data' column contains the ECG data\n","hyp_upsampled['signal'] = hyp_upsampled['signal'].apply(add_noise)\n","\n","# Combine the upsampled 'HYP' class with the original dataframe\n","df = pd.concat([df[df['superclass'] != '[\\'HYP\\']'], hyp_upsampled])\n","df = df.reset_index(drop=True)\n","\n","# df = df[df['superclass'] != '[\\'HYP\\']']\n","df = df.reset_index(drop=True)\n","print(df)\n","# Choose one signal from the upsampled dataframe\n","original_signal = hyp_upsampled['signal'].iloc[0]\n","\n","# Apply noise to this signal\n","noisy_signal = add_noise(original_signal)\n","\n","# Plot original signal (first lead)\n","plt.figure(figsize=(15, 3))\n","plt.plot(original_signal[:, 0])  # select the first lead\n","plt.title(\"Original ECG Signal (Lead 1)\")\n","plt.show()\n","\n","# Plot noisy signal (first lead)\n","plt.figure(figsize=(15, 3))\n","plt.plot(noisy_signal[:, 0])  # select the first lead\n","plt.title(\"Noisy ECG Signal (Lead 1)\")\n","plt.show()\n","\n"]},{"cell_type":"markdown","metadata":{"id":"JwPkIm52ueGW"},"source":["## One Hot"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":678},"id":"FoO3THauueGW","executionInfo":{"status":"ok","timestamp":1690804657842,"user_tz":-120,"elapsed":528,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}},"outputId":"72e38f94-d06f-4fe2-9dd2-fbc340b68eac"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                     record_name  \\\n","0      records500/00000/00001_hr   \n","1      records500/00000/00003_hr   \n","2      records500/00000/00008_hr   \n","3      records500/00000/00010_hr   \n","4      records500/00000/00012_hr   \n","...                          ...   \n","11704  records500/11000/11847_hr   \n","11705  records500/01000/01851_hr   \n","11706  records500/08000/08766_hr   \n","11707  records500/15000/15470_hr   \n","11708  records500/20000/20607_hr   \n","\n","                                                  signal   age  sex  ['CD']  \\\n","0      [[-0.08588371897207263, -0.03736346853162483, ...  56.0    1       0   \n","1      [[-0.02596508144425195, -0.052584897690685514,...  37.0    1       0   \n","2      [[-0.029191385508134767, -0.05611670272285019,...  48.0    0       0   \n","3      [[-0.04884232917703562, -0.0901889111153408, -...  22.0    1       0   \n","4      [[0.1972585306084939, 0.2603701638378019, 0.06...  43.0    1       0   \n","...                                                  ...   ...  ...     ...   \n","11704  [[-0.04933608124644776, -0.10538589375587953, ...  71.0    1       0   \n","11705  [[0.015299943875268653, 0.3489574946327841, 0....  79.0    1       0   \n","11706  [[-0.09354560845722096, -0.2154623788971811, -...  60.0    1       0   \n","11707  [[-0.1278517588117213, 0.03778699999254446, -0...  72.0    0       0   \n","11708  [[-0.0076176861574226845, -0.10097023408838335...  85.0    0       0   \n","\n","       ['HYP']  ['MI']  ['NORM']  ['STTC']  \n","0            0       0         1         0  \n","1            0       0         1         0  \n","2            0       1         0         0  \n","3            0       0         1         0  \n","4            0       0         1         0  \n","...        ...     ...       ...       ...  \n","11704        1       0         0         0  \n","11705        1       0         0         0  \n","11706        1       0         0         0  \n","11707        1       0         0         0  \n","11708        1       0         0         0  \n","\n","[11709 rows x 9 columns]"],"text/html":["\n","\n","  <div id=\"df-2ff18adf-e4f6-48ca-bd15-1fea3f8e493d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>record_name</th>\n","      <th>signal</th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>['CD']</th>\n","      <th>['HYP']</th>\n","      <th>['MI']</th>\n","      <th>['NORM']</th>\n","      <th>['STTC']</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>records500/00000/00001_hr</td>\n","      <td>[[-0.08588371897207263, -0.03736346853162483, ...</td>\n","      <td>56.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>records500/00000/00003_hr</td>\n","      <td>[[-0.02596508144425195, -0.052584897690685514,...</td>\n","      <td>37.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>records500/00000/00008_hr</td>\n","      <td>[[-0.029191385508134767, -0.05611670272285019,...</td>\n","      <td>48.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>records500/00000/00010_hr</td>\n","      <td>[[-0.04884232917703562, -0.0901889111153408, -...</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>records500/00000/00012_hr</td>\n","      <td>[[0.1972585306084939, 0.2603701638378019, 0.06...</td>\n","      <td>43.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>11704</th>\n","      <td>records500/11000/11847_hr</td>\n","      <td>[[-0.04933608124644776, -0.10538589375587953, ...</td>\n","      <td>71.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>11705</th>\n","      <td>records500/01000/01851_hr</td>\n","      <td>[[0.015299943875268653, 0.3489574946327841, 0....</td>\n","      <td>79.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>11706</th>\n","      <td>records500/08000/08766_hr</td>\n","      <td>[[-0.09354560845722096, -0.2154623788971811, -...</td>\n","      <td>60.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>11707</th>\n","      <td>records500/15000/15470_hr</td>\n","      <td>[[-0.1278517588117213, 0.03778699999254446, -0...</td>\n","      <td>72.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>11708</th>\n","      <td>records500/20000/20607_hr</td>\n","      <td>[[-0.0076176861574226845, -0.10097023408838335...</td>\n","      <td>85.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>11709 rows × 9 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2ff18adf-e4f6-48ca-bd15-1fea3f8e493d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-f6613d68-42b5-4513-b7a7-8b01e1964298\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f6613d68-42b5-4513-b7a7-8b01e1964298')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-f6613d68-42b5-4513-b7a7-8b01e1964298 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-2ff18adf-e4f6-48ca-bd15-1fea3f8e493d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-2ff18adf-e4f6-48ca-bd15-1fea3f8e493d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":7}],"source":["# Make sure each label is in a separate list\n","df['superclass'] = df['superclass'].apply(lambda x: [x] if isinstance(x, str) else x)\n","\n","mlb = MultiLabelBinarizer()\n","label_encoded = mlb.fit_transform(df['superclass'])\n","df_encoded = pd.concat([df.drop('superclass', axis=1), pd.DataFrame(label_encoded, columns=mlb.classes_)], axis=1)\n","\n","df_encoded\n"]},{"cell_type":"markdown","metadata":{"id":"6QrNgk82ueGX"},"source":["## Distribution of diseases SNOMED"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"26V5zFrVueGX","executionInfo":{"status":"ok","timestamp":1690804657843,"user_tz":-120,"elapsed":12,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"outputs":[],"source":["# plt.figure(figsize=(10, 6))\n","\n","# # Bar chart\n","# bars = plt.bar(disease_counts_sorted.index.astype(str), disease_counts_sorted.values)\n","\n","# # Add data values to the top of the bars\n","# for bar in bars:\n","#     yval = bar.get_height()\n","#     plt.text(bar.get_x() + bar.get_width() / 2, yval + 0.05, int(yval), ha='center', va='bottom')\n","\n","# plt.xlabel('SNOMED Disease Code')\n","# plt.ylabel('Number of Patients')\n","# plt.title('Distribution of Diseases')\n","# plt.xticks(rotation=90)\n","# plt.tight_layout()\n","# plt.show()\n"]},{"cell_type":"markdown","metadata":{"id":"sTSTt_xZueGX"},"source":["## test display"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":389},"id":"Yqflx1tnueGX","executionInfo":{"status":"ok","timestamp":1690804660550,"user_tz":-120,"elapsed":2718,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}},"outputId":"b1f48933-2ea8-4c5b-ee1b-287a1c7ef825"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import matplotlib.pyplot as plt\n","\n","plt.figure(figsize=(15, 8))\n","\n","# Create a list to store all ECG signals\n","all_ecgs = []\n","\n","# Iterate over the 12 leads\n","for i in range(12):\n","    single_ecg = []\n","    for sublist in df_encoded.loc[3,'signal']:  # Get the data for one patient\n","        single_ecg.append(sublist[i])  # Get data for one lead\n","\n","    signals, info = nk.ecg_process(single_ecg, sampling_rate=100)\n","    cleaned_ecg = signals[\"ECG_Clean\"]\n","\n","    all_ecgs.append(cleaned_ecg)\n","\n","# Combine all ECG signals into a single 2D array\n","all_ecgs = np.stack(all_ecgs)\n","\n","# Plot each ECG lead with a slight vertical shift for better visibility\n","for i, ecg in enumerate(all_ecgs):\n","    plt.plot(ecg + i*2)  # Shift each lead by 200 units\n","\n","plt.title('ECG signals for all 12 leads')\n","plt.show()\n"]},{"cell_type":"markdown","metadata":{"id":"0OmQQGDPueGY"},"source":["## Remove last beat if incomplete"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"v-cICDEtueGY","executionInfo":{"status":"ok","timestamp":1690804660550,"user_tz":-120,"elapsed":16,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"outputs":[],"source":["# cpt=0\n","# def clean_heartbeats(row):\n","#     global cpt\n","#     all_leads = []\n","#     for sublist in row['signal']:\n","#         all_leads.append(sublist)  # Get all leads\n","\n","#     # Process lead II to get R-peaks\n","#     single_ecg_lead_II = [sublist[1] for sublist in row['signal']]  # LEAD II\n","#     try:\n","#         signals, info = nk.ecg_process(single_ecg_lead_II, sampling_rate=100)\n","#     except ValueError as e:\n","#         print(f\"An error occurred while processing the ECG data for record {row['record_name']}: {e}\")\n","#         return single_ecg_lead_II  # Return the original ECG signal if an error occurs\n","\n","#     rpeaks = info[\"ECG_R_Peaks\"]\n","#     # Remove NaN values from rpeaks\n","#     rpeaks = rpeaks[~np.isnan(rpeaks)]\n","#     try:\n","#         heartbeats_II = np.split(single_ecg_lead_II, rpeaks.astype(int))\n","#     except ValueError as e:\n","#         print(f\"An error occurred while splitting the ECG data for record {row['record_name']}: {e}\")\n","#         return single_ecg_lead_II  # Return the original ECG signal if an error occurs\n","\n","#     # Check if the last heartbeat is incomplete (i.e., significantly shorter than the others)\n","#     average_heartbeat_length = np.mean([len(heartbeat) for heartbeat in heartbeats_II])\n","#     if len(heartbeats_II[-1]) < average_heartbeat_length * 0.75:\n","#         rpeaks = rpeaks[:-1]  # Remove the last R-peak\n","#         cpt += 1\n","\n","#     # Use the R-peaks to segment all leads and remove incomplete heartbeats\n","#     cleaned_ecg_leads = []\n","#     for lead in all_leads:\n","#         try:\n","#             heartbeats = np.split(lead, rpeaks.astype(int))\n","#         except ValueError as e:\n","#             print(f\"An error occurred while splitting the ECG data for record {row['record_name']}: {e}\")\n","#             return lead  # Return the original ECG signal if an error occurs\n","\n","#         if len(heartbeats[-1]) < average_heartbeat_length * 0.75:\n","#             heartbeats = heartbeats[:-1]  # Remove the last heartbeat if incomplete\n","#         # Concatenate the heartbeats back into a single ECG signal\n","#         cleaned_ecg_lead = np.concatenate(heartbeats)\n","#         cleaned_ecg_leads.append(cleaned_ecg_lead)\n","\n","#     # Stack the cleaned leads back together\n","#     cleaned_ecg = np.stack(cleaned_ecg_leads, axis=-1)\n","#     return cleaned_ecg\n","\n","\n","# # Apply the function to the 'signal' column of the DataFrame\n","# df_encoded_removed_beats = df_encoded\n","# df_encoded_removed_beats['signal'] = df_encoded.apply(clean_heartbeats, axis=1)\n","# print(df_encoded_removed_beats)\n","# print(df_encoded_removed_beats['signal'][0])\n","# print(df_encoded_removed_beats['signal'][0][0])\n","# print(df_encoded_removed_beats['signal'][0][0][0])\n","# print(df_encoded_removed_beats.shape)\n","# print(f\"number of incomplete beats patients: {cpt}/{len(df_encoded.index)}\")\n","# df_encoded_removed_beats.to_pickle('df_encoded_removed_beats.pkl')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"IhgcljcfueGZ"},"source":["## Notch filer - 50hz cleaning"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"d4_hagNzueGZ","executionInfo":{"status":"ok","timestamp":1690804660551,"user_tz":-120,"elapsed":16,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"outputs":[],"source":["# # Define the sample rate and the frequencies for the notch and low-pass filters\n","# sample_rate = 100\n","# notch_freq = 50\n","# low_pass_freq = 15  # Adjust the low-pass frequency to maintain similar filtering characteristics\n","\n","# def design_filters(sample_rate, notch_freq, low_pass_freq):\n","#     # Design the notch filter\n","#     nyquist = 0.5 * sample_rate\n","#     freq_ratio = notch_freq / nyquist\n","#     notch_filter = iirnotch(freq_ratio, 30)  # 30 is the quality factor of the filter\n","\n","#     # Design the low-pass filter\n","#     low_pass_filter = butter(5, low_pass_freq / nyquist, btype='low')\n","\n","#     return notch_filter, low_pass_filter\n","\n","# # Design the filters\n","# notch_filter, low_pass_filter = design_filters(sample_rate, notch_freq, low_pass_freq)\n","# # Define a function to apply the filters\n","# def apply_filters(data, notch_filter, low_pass_filter):\n","#     # Apply the notch filter\n","#     data = lfilter(*notch_filter, data)\n","\n","#     # Apply the low-pass filter\n","#     data = lfilter(*low_pass_filter, data)\n","\n","#     return data\n","# # Apply the filters to the data\n","# print(df_encoded.shape)\n","# df_encoded['signal'] = df_encoded['signal'].apply(lambda signal: apply_filters(signal, notch_filter, low_pass_filter))\n","# print(df_encoded.shape)\n"]},{"cell_type":"markdown","metadata":{"id":"QLZFuPaAueGZ"},"source":["## Smoothen signal cleaning"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"AxUNdxiwueGZ","executionInfo":{"status":"ok","timestamp":1690804660551,"user_tz":-120,"elapsed":15,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"outputs":[],"source":["# # def moving_average(signal, window_size):\n","# #     # If the signal has more than one channel, apply the moving average to each channel\n","# #     if signal.ndim > 1:\n","# #         return np.array([np.convolve(channel, np.ones(window_size) / window_size, mode='same') for channel in signal.T]).T\n","# #     # If the signal is only one channel, apply the moving average normally\n","# #     else:\n","# #         return np.convolve(signal, np.ones(window_size) / window_size, mode='same')\n","\n","# # df_encoded['signal'] = df_encoded['signal'].apply(lambda signal: moving_average(signal, window_size=3))\n","\n","# # df_encoded['signal'] = df_encoded['signal'].apply(lambda signal: butter_lowpass_filter(signal, cutoff, fs, order))\n","\n","# import pywt\n","# from scipy.stats import median_abs_deviation as mad\n","\n","# def maddest(d, axis=None):  # Mean Absolute Deviation\n","#     return np.mean(np.absolute(d - np.mean(d, axis)), axis)\n","\n","# def wavelet_smooth(signal, wavelet=\"db5\", level=1):\n","#     coeff = pywt.wavedec(signal, wavelet, mode=\"per\")\n","#     sigma = (1/0.6745) * maddest(coeff[-level])\n","#     uthresh = sigma * np.sqrt(2*np.log(len(signal)))\n","#     coeff[1:] = (pywt.threshold(i, value=uthresh, mode=\"soft\") for i in coeff[1:])\n","#     reconstructed_signal = pywt.waverec(coeff, wavelet, mode=\"per\")\n","#     return reconstructed_signal\n","\n","# df_encoded['signal'] = df_encoded['signal'].apply(lambda signal: wavelet_smooth(signal))\n","\n"]},{"cell_type":"markdown","metadata":{"id":"C3L5t73yueGa"},"source":["## Remove Outliers"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"UE535wjHueGa","executionInfo":{"status":"ok","timestamp":1690804660552,"user_tz":-120,"elapsed":15,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"outputs":[],"source":["\n","# # Compute the mean and standard deviation for each record\n","# means = np.array([np.mean(record) for record in df_encoded['signal']])\n","# std_devs = np.array([np.std(record) for record in df_encoded['signal']])\n","\n","# # Compute the average mean and standard deviation\n","# avg_mean = np.mean(means)\n","# avg_std_dev = np.mean(std_devs)\n","\n","# # Compute the standard deviation of the means and standard deviations\n","# std_mean = np.std(means)\n","# std_std_dev = np.std(std_devs)\n","\n","# # Identify outliers as records where the mean or standard deviation is more than 3 standard deviations from the average\n","# outlier_indices = np.where(\n","#     (np.abs(means - avg_mean) > 3 * std_mean) |\n","#     (np.abs(std_devs - avg_std_dev) > 3 * std_std_dev)\n","# )[0]\n","\n","# # Remove outliers from df\n","# df_cleaned = df_encoded.drop(outlier_indices)\n","# print(df_cleaned.shape)\n","# print(len(df_cleaned['signal'][0]))\n","# print(df_cleaned['signal'][0][0])\n","# #df_cleaned = df_encoded"]},{"cell_type":"markdown","metadata":{"id":"zYCEO_LrueGa"},"source":["## Normalization"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"uAeZe9gDueGa","executionInfo":{"status":"ok","timestamp":1690804660552,"user_tz":-120,"elapsed":15,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"outputs":[],"source":["# from tqdm import tqdm\n","\n","# def normalize_patient_signals(patient_signals, patient_index):\n","#     scaler = MinMaxScaler(feature_range=(-1, 1))\n","#     patient_ecgs_normalized = []\n","\n","#     for i in range(12):\n","#         single_ecg = patient_signals[:, i]\n","\n","#         try:\n","#             signals, info = nk.ecg_process(single_ecg, sampling_rate=100)\n","#             cleaned_ecg = signals[\"ECG_Clean\"]\n","\n","#             # Normalize the ECG signal\n","#             normalized_ecg = scaler.fit_transform(cleaned_ecg.to_numpy().reshape(-1, 1))\n","\n","#             # Center the normalized ECG signal around 0\n","#             normalized_centered_ecg = normalized_ecg - np.mean(normalized_ecg)\n","#             patient_ecgs_normalized.append(normalized_centered_ecg.flatten())\n","\n","#         except ValueError:\n","#             print(f\"Error processing ECG signal for patient at index {patient_index}. Plotting signal and skipping...\")\n","#             plt.figure(figsize=(10, 4))\n","#             plt.plot(single_ecg)\n","#             plt.title(f'ECG signal causing error for patient at index {patient_index}')\n","#             plt.show()\n","#             return None  # Return None to indicate an error\n","\n","#     # Combine all normalized ECG signals for current patient into a single 2D array\n","#     return np.stack(patient_ecgs_normalized)\n","\n","\n","# # Apply the function to each row in the 'signal' column, and also pass the index to the function\n","# for index in tqdm(df_encoded.index):\n","#     df_encoded.at[index, 'signal'] = normalize_patient_signals(df_encoded.loc[index, 'signal'], index)\n","\n","# # Drop rows where 'signal' is None (i.e., the ECG processing failed)\n","# df_encoded = df_encoded.dropna(subset=['signal'])\n","\n","\n","df_cleaned = df_encoded\n"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"TeC9ak1wueGb","executionInfo":{"status":"ok","timestamp":1690804660553,"user_tz":-120,"elapsed":16,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"outputs":[],"source":["# def minmax_scale_image(image):\n","#     min_val = image.min()\n","#     max_val = image.max()\n","#     scaled_image = (image - min_val) / (max_val - min_val)\n","#     return scaled_image\n","\n","# # Apply the minmax_scale_image function to each 2D image in the 'signal' column\n","# df_encoded['signal'] = df_encoded['signal'].apply(minmax_scale_image)\n"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"S_eatSDcueGb","executionInfo":{"status":"ok","timestamp":1690804660553,"user_tz":-120,"elapsed":16,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"aK5z-wd8ueGb"},"source":["# Split"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NKWZE2gmueGb","executionInfo":{"status":"ok","timestamp":1690804661853,"user_tz":-120,"elapsed":1316,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}},"outputId":"ee26de1c-dcf0-433c-f943-507b9f870605"},"outputs":[{"output_type":"stream","name":"stdout","text":["ECG Data Shapes:\n","Training data: (8196, 2500, 12)\n","Validation data: (1756, 2500, 12)\n","Test data: (1757, 2500, 12)\n","\n","Info Data Shapes:\n","Training data: (8196, 0)\n","Validation data: (1756, 0)\n","Test data: (1757, 0)\n","\n","Target Labels Shape:\n","Training labels: (8196, 5)\n","Validation labels: (1756, 5)\n","Test labels: (1757, 5)\n"]}],"source":["import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","\n","# Separate the target labels (heart condition classes) and the input features\n","X_ecg = np.array(df_cleaned['signal'].tolist())\n","X_info = df_cleaned[[]]  # age and sex as additional features\n","y = df_cleaned.drop(['record_name', 'signal', 'age', 'sex'], axis=1)\n","\n","# Split the data into training, validation, and test sets\n","X_ecg_train, X_ecg_test, X_info_train, X_info_test, y_train, y_test = train_test_split(\n","    X_ecg, X_info, y, test_size=0.3, random_state=12\n",")\n","X_ecg_val, X_ecg_test, X_info_val, X_info_test, y_val, y_test = train_test_split(\n","    X_ecg_test, X_info_test, y_test, test_size=0.5, random_state=12\n",")\n","\n","# Apply feature scaling (if needed) on the ECG signal data\n","# scaler = StandardScaler()\n","# X_ecg_train = np.array([scaler.fit_transform(sample) for sample in X_ecg_train])\n","# X_ecg_val = np.array([scaler.transform(sample) for sample in X_ecg_val])\n","# X_ecg_test = np.array([scaler.transform(sample) for sample in X_ecg_test])\n","\n","# Check the shapes of the datasets\n","print(\"ECG Data Shapes:\")\n","print(\"Training data:\", X_ecg_train.shape)\n","print(\"Validation data:\", X_ecg_val.shape)\n","print(\"Test data:\", X_ecg_test.shape)\n","print(\"\\nInfo Data Shapes:\")\n","print(\"Training data:\", X_info_train.shape)\n","print(\"Validation data:\", X_info_val.shape)\n","print(\"Test data:\", X_info_test.shape)\n","print(\"\\nTarget Labels Shape:\")\n","print(\"Training labels:\", y_train.shape)\n","print(\"Validation labels:\", y_val.shape)\n","print(\"Test labels:\", y_test.shape)\n"]},{"cell_type":"markdown","source":["Random Forest Test\n"],"metadata":{"id":"sQ36Yr09q5da"}},{"cell_type":"code","source":["# from sklearn.model_selection import GridSearchCV\n","# from sklearn.ensemble import RandomForestClassifier\n","\n","# # Flatten the data\n","# X_ecg_train_flattened = X_ecg_train.reshape(X_ecg_train.shape[0], -1)\n","# X_ecg_val_flattened = X_ecg_val.reshape(X_ecg_val.shape[0], -1)\n","# X_ecg_test_flattened = X_ecg_test.reshape(X_ecg_test.shape[0], -1)\n","\n","# # Convert DataFrames to NumPy arrays and then to label-encoded form\n","# y_train_single = np.argmax(y_train.values, axis=1)\n","# y_val_single = np.argmax(y_val.values, axis=1)\n","# y_test_single = np.argmax(y_test.values, axis=1)\n","\n","# # Define the parameter grid\n","# param_grid = {\n","#     'n_estimators': [100, 200],\n","#     'max_depth': [None, 20],\n","#     'min_samples_split': [2, 5],\n","#     'min_samples_leaf': [1, 2],\n","#     'max_features': ['auto']\n","# }\n","\n","# # Create a base model\n","# rf = RandomForestClassifier(random_state=12)\n","\n","# # Instantiate the grid search model\n","# grid_search = GridSearchCV(estimator = rf, param_grid = param_grid,\n","#                            cv = 2, n_jobs = -1, verbose = 2)\n","\n","# # Fit the grid search to the data\n","# grid_search.fit(X_ecg_train_flattened, y_train_single)\n","\n","# # Print the best parameters\n","# print(grid_search.best_params_)\n","\n","# # Use the best model\n","# best_grid = grid_search.best_estimator_\n","\n","# # Make predictions using the best model\n","# y_val_pred = best_grid.predict(X_ecg_val_flattened)\n"],"metadata":{"id":"PO0LYXFQq7g6","executionInfo":{"status":"ok","timestamp":1690804661853,"user_tz":-120,"elapsed":2,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":["ResNet Test\n"],"metadata":{"id":"A47ysFParsih"}},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras import layers, Model\n","from tensorflow.keras import backend as K\n","\n","class GlobalAvgPool1D(layers.Layer):\n","    def call(self, inputs):\n","        return K.mean(inputs, axis=1)\n","\n","class GlobalMaxPool1D(layers.Layer):\n","    def call(self, inputs):\n","        return K.max(inputs, axis=1)\n","\n","def create_rnn(input_shape, num_classes, lstm=True, hidden_dim=256, num_layers=2, bidirectional=False):\n","    # Define the input layer\n","    ecg_input = layers.Input(shape=input_shape)\n","\n","    # Define the LSTM or GRU layer\n","    if lstm:\n","        rnn_layer = layers.LSTM(units=hidden_dim, return_sequences=True)(ecg_input)\n","    else:\n","        rnn_layer = layers.GRU(units=hidden_dim, return_sequences=True)(ecg_input)\n","\n","    # Repeat the LSTM or GRU layer if num_layers > 1\n","    for i in range(1, num_layers):\n","        if lstm:\n","            rnn_layer = layers.LSTM(units=hidden_dim, return_sequences=True)(rnn_layer)\n","        else:\n","            rnn_layer = layers.GRU(units=hidden_dim, return_sequences=True)(rnn_layer)\n","\n","    # Define the pooling layers\n","    avg_pool = GlobalAvgPool1D()(rnn_layer)\n","    max_pool = GlobalMaxPool1D()(rnn_layer)\n","    last_pool = layers.Lambda(lambda x: x[:, -1])(rnn_layer)\n","\n","    # Concatenate the pooled layers\n","    concatenated = layers.Concatenate()([avg_pool, max_pool, last_pool])\n","\n","    # Define the classifier layers\n","    output = layers.Dense(hidden_dim, activation='relu')(concatenated)\n","    output = layers.Dropout(0.5)(output)\n","    output = layers.Dense(num_classes, activation='softmax')(output)\n","\n","    # Build and return the model\n","    model = Model(inputs=ecg_input, outputs=output)\n","    return model\n","\n","    # Specify your input shape and number of classes\n","input_shape = (2500, 12)\n","num_classes = 5  # replace this with your actual number of classes\n","\n","# Create the model\n","model = create_rnn(input_shape, num_classes, lstm=True, hidden_dim=256, num_layers=2, bidirectional=False)\n","\n","# Compile the model\n","model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n","\n","# Train the model\n","history = model.fit(X_ecg_train, y_train, batch_size=32, epochs=10, validation_data=(X_ecg_val, y_val))\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0EukG8RwrtyI","executionInfo":{"status":"ok","timestamp":1690805399187,"user_tz":-120,"elapsed":682284,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}},"outputId":"d6f40c10-9db8-4026-e624-e8b2a4aef38d"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","257/257 [==============================] - 69s 253ms/step - loss: 1.2594 - categorical_accuracy: 0.4841 - val_loss: 0.9707 - val_categorical_accuracy: 0.6298\n","Epoch 2/10\n","257/257 [==============================] - 66s 256ms/step - loss: 0.9952 - categorical_accuracy: 0.6279 - val_loss: 0.8780 - val_categorical_accuracy: 0.6834\n","Epoch 3/10\n","257/257 [==============================] - 67s 262ms/step - loss: 0.8672 - categorical_accuracy: 0.6906 - val_loss: 0.8615 - val_categorical_accuracy: 0.6794\n","Epoch 4/10\n","257/257 [==============================] - 68s 265ms/step - loss: 0.8162 - categorical_accuracy: 0.7111 - val_loss: 0.8181 - val_categorical_accuracy: 0.6965\n","Epoch 5/10\n","257/257 [==============================] - 68s 267ms/step - loss: 0.7582 - categorical_accuracy: 0.7296 - val_loss: 0.7916 - val_categorical_accuracy: 0.7090\n","Epoch 6/10\n","257/257 [==============================] - 68s 265ms/step - loss: 0.7135 - categorical_accuracy: 0.7449 - val_loss: 0.6935 - val_categorical_accuracy: 0.7506\n","Epoch 7/10\n","257/257 [==============================] - 68s 265ms/step - loss: 0.6693 - categorical_accuracy: 0.7605 - val_loss: 0.7843 - val_categorical_accuracy: 0.7107\n","Epoch 8/10\n","257/257 [==============================] - 68s 265ms/step - loss: 0.6766 - categorical_accuracy: 0.7593 - val_loss: 0.7086 - val_categorical_accuracy: 0.7432\n","Epoch 9/10\n","257/257 [==============================] - 68s 265ms/step - loss: 0.6277 - categorical_accuracy: 0.7782 - val_loss: 0.6162 - val_categorical_accuracy: 0.7836\n","Epoch 10/10\n","257/257 [==============================] - 68s 265ms/step - loss: 0.5531 - categorical_accuracy: 0.8023 - val_loss: 0.6257 - val_categorical_accuracy: 0.7751\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import roc_auc_score, classification_report\n","\n","# Ensure your data is correctly shaped. If your data preparation step is correct,\n","# X_ecg_test should already have the shape of (num_instances, 1000, 12).\n","# In case it doesn't, reshape it as necessary.\n","\n","# Predict with the reshaped data\n","y_pred = model.predict(X_ecg_test)\n","\n","# Convert the predictions from probabilities to binary outputs (0 and 1)\n","# This is necessary for multi-label classification\n","y_pred_binary = np.where(y_pred > 0.5, 1, 0)\n","\n","# ROC AUC\n","roc_auc = roc_auc_score(y_test, y_pred, average='samples')  # Multi-label case\n","print(f'ROC AUC Score: {roc_auc}')\n","\n","# Classification Report\n","# ['CD']\t['HYP']\t['MI']\t['NORM']\t['STTC']\n","target_names = ['CD','HYP','MI','NORM','STTC']\n","#target_names = ['CD','MI','NORM','STTC']\n","print(classification_report(y_test, y_pred_binary, target_names=target_names))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aYbnNjKl0wdZ","executionInfo":{"status":"ok","timestamp":1690805424315,"user_tz":-120,"elapsed":7952,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}},"outputId":"16d3b08f-dc2a-4048-e572-52253fbce579"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["55/55 [==============================] - 6s 99ms/step\n","ROC AUC Score: 0.9171883892999431\n","              precision    recall  f1-score   support\n","\n","          CD       0.93      0.70      0.80       260\n","         HYP       0.86      0.98      0.92       313\n","          MI       0.78      0.73      0.75       404\n","        NORM       0.83      0.67      0.74       438\n","        STTC       0.76      0.65      0.70       342\n","\n","   micro avg       0.82      0.74      0.78      1757\n","   macro avg       0.83      0.74      0.78      1757\n","weighted avg       0.82      0.74      0.77      1757\n"," samples avg       0.74      0.74      0.74      1757\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in samples with no predicted labels. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import roc_curve, auc\n","from sklearn.preprocessing import label_binarize\n","from itertools import cycle\n","import matplotlib.pyplot as plt\n","\n","y_test_array = y_test.values\n","\n","n_classes = y_test.shape[1]\n","\n","# Compute ROC curve and ROC area for each class\n","fpr = dict()\n","tpr = dict()\n","roc_auc = dict()\n","for i in range(n_classes):\n","    fpr[i], tpr[i], _ = roc_curve(y_test_array[:, i], y_pred[:, i])\n","    roc_auc[i] = auc(fpr[i], tpr[i])\n","\n","\n","# Plot all ROC curvesplt.figure()\n","for i, color in zip(range(n_classes), cycle(['purple', 'darkorange', 'black', 'red', 'green'])):\n","    plt.plot(fpr[i], tpr[i], color=color, lw=2,\n","             label='ROC curve of class {0} (area = {1:0.2f})'\n","             ''.format(target_names[i], roc_auc[i]))  # replace 'i' with 'target_names[i]'\n","\n","plt.plot([0, 1], [0, 1], 'k--', lw=2)\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Some extension of Receiver operating characteristic to multi-class')\n","plt.legend(loc=\"lower right\")\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"IRVWefPk0qlf","executionInfo":{"status":"ok","timestamp":1690805431786,"user_tz":-120,"elapsed":803,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}},"outputId":"35b2f545-65bb-4716-9f78-e34eb6dd79a6"},"execution_count":21,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"vrkBQeszueGc"},"source":["# CNN\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cj9sLF8XueGc","executionInfo":{"status":"aborted","timestamp":1690804696170,"user_tz":-120,"elapsed":13,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"outputs":[],"source":["# Define the ECG branch of the model\n","ecg_input = layers.Input(shape=(2500, 12))\n","ecg_layer = layers.Conv1D(64, 7, activation='relu')(ecg_input)\n","ecg_layer = layers.MaxPooling1D(3)(ecg_layer)\n","ecg_layer = layers.Conv1D(64, 7, activation='relu')(ecg_layer)\n","ecg_layer = layers.MaxPooling1D(3)(ecg_layer)\n","ecg_layer = layers.Dropout(0.5)(ecg_layer)\n","ecg_layer = layers.Flatten()(ecg_layer)\n","\n","\n","# Add a couple of Dense layers\n","output = layers.Dense(64, activation='relu')(ecg_layer)\n","output = layers.Dropout(0.5)(output)\n","output = layers.Dense(y_train.shape[1], activation='softmax')(output)\n","\n","# Build the model\n","model = tf.keras.Model(inputs=[ecg_input], outputs=output)\n","\n","\n","# Compile the model\n","model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n","\n","# Print the model summary\n","model.summary()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vntZRJfoueGc","executionInfo":{"status":"aborted","timestamp":1690804696170,"user_tz":-120,"elapsed":13,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"outputs":[],"source":["print(\"Training data:\", X_ecg_train.shape)\n","print(\"Validation data:\", X_ecg_val.shape)\n","print(\"Test data:\", X_ecg_test.shape)\n","\n","#class_weight = {0: 0.3, 1: 1., 2: 0.3, 3: 0.15, 4: 0.3}\n","# Print the index and type of all non-array elements in X_ecg_train\n","\n","history_12 = model.fit(\n","    X_ecg_train,\n","    y_train,\n","    validation_data=(X_ecg_val, y_val),\n","    epochs=50,  # specify the number of epochs\n","    batch_size=32,  # specify your batch size\n","    #class_weight = class_weight\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rdoq25uOueGc","executionInfo":{"status":"aborted","timestamp":1690804696171,"user_tz":-120,"elapsed":14,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"outputs":[],"source":["from sklearn.metrics import roc_auc_score, classification_report\n","\n","# Ensure your data is correctly shaped. If your data preparation step is correct,\n","# X_ecg_test should already have the shape of (num_instances, 1000, 12).\n","# In case it doesn't, reshape it as necessary.\n","\n","# Predict with the reshaped data\n","y_pred = model.predict(X_ecg_test)\n","\n","# Convert the predictions from probabilities to binary outputs (0 and 1)\n","# This is necessary for multi-label classification\n","y_pred_binary = np.where(y_pred > 0.5, 1, 0)\n","\n","# ROC AUC\n","roc_auc = roc_auc_score(y_test, y_pred, average='samples')  # Multi-label case\n","print(f'ROC AUC Score: {roc_auc}')\n","\n","# Classification Report\n","# ['CD']\t['HYP']\t['MI']\t['NORM']\t['STTC']\n","target_names = ['CD','HYP','MI','NORM','STTC']\n","#target_names = ['CD','MI','NORM','STTC']\n","print(classification_report(y_test, y_pred_binary, target_names=target_names))\n"]},{"cell_type":"markdown","metadata":{"id":"s2eoe-A4ueGd"},"source":["## Test"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qej0ugz3ueGd","executionInfo":{"status":"aborted","timestamp":1690804696171,"user_tz":-120,"elapsed":13,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"outputs":[],"source":["# Evaluate the model on the test set\n","test_loss, test_accuracy = model.evaluate(X_ecg_test, y_test)\n","\n","print(f\"Test Loss: {test_loss}\")\n","print(f\"Test Accuracy: {test_accuracy}\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"s7y8JC4vueGd","executionInfo":{"status":"aborted","timestamp":1690804696171,"user_tz":-120,"elapsed":13,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"outputs":[],"source":["from sklearn.metrics import roc_curve, auc\n","from sklearn.preprocessing import label_binarize\n","from itertools import cycle\n","import matplotlib.pyplot as plt\n","\n","y_test_array = y_test.values\n","\n","n_classes = y_test.shape[1]\n","\n","# Compute ROC curve and ROC area for each class\n","fpr = dict()\n","tpr = dict()\n","roc_auc = dict()\n","for i in range(n_classes):\n","    fpr[i], tpr[i], _ = roc_curve(y_test_array[:, i], y_pred[:, i])\n","    roc_auc[i] = auc(fpr[i], tpr[i])\n","\n","\n","# Plot all ROC curvesplt.figure()\n","for i, color in zip(range(n_classes), cycle(['purple', 'darkorange', 'black', 'red', 'green'])):\n","    plt.plot(fpr[i], tpr[i], color=color, lw=2,\n","             label='ROC curve of class {0} (area = {1:0.2f})'\n","             ''.format(target_names[i], roc_auc[i]))  # replace 'i' with 'target_names[i]'\n","\n","plt.plot([0, 1], [0, 1], 'k--', lw=2)\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Some extension of Receiver operating characteristic to multi-class')\n","plt.legend(loc=\"lower right\")\n","plt.show()\n"]},{"cell_type":"markdown","metadata":{"id":"RjMJ7Hv-ueGe"},"source":["## 10-Fold\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zPWo7fKQueGe","executionInfo":{"status":"aborted","timestamp":1690804696171,"user_tz":-120,"elapsed":13,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"outputs":[],"source":["# from sklearn.model_selection import KFold\n","\n","# # Define the number of folds\n","# n_folds = 10\n","# kfold = KFold(n_splits=n_folds, shuffle=True, random_state=42)\n","\n","# # Define your data\n","# X = np.array(df_cleaned['signal'].tolist())\n","# y = df_cleaned.drop(['record_name', 'signal', 'age', 'sex'], axis=1)\n","\n","# scores = []\n","\n","# for train_index, val_index in kfold.split(X):\n","#     X_train, X_val = X[train_index], X[val_index]\n","#     y_train, y_val = y.iloc[train_index], y.iloc[val_index]\n","\n","#     # Define the ECG branch of the model\n","#     ecg_input = layers.Input(shape=(2500, 12))\n","#     ecg_layer = layers.Conv1D(64, 7, activation='relu')(ecg_input)\n","#     ecg_layer = layers.MaxPooling1D(3)(ecg_layer)\n","#     ecg_layer = layers.Conv1D(64, 7, activation='relu')(ecg_layer)\n","#     ecg_layer = layers.MaxPooling1D(3)(ecg_layer)\n","#     ecg_layer = layers.Dropout(0.5)(ecg_layer)\n","#     ecg_layer = layers.Flatten()(ecg_layer)\n","\n","#     # Add a couple of Dense layers\n","#     output = layers.Dense(64, activation='relu')(ecg_layer)\n","#     output = layers.Dropout(0.5)(output)\n","#     output = layers.Dense(y_train.shape[1], activation='softmax')(output)\n","\n","#     # Build the model\n","#     model = tf.keras.Model(inputs=[ecg_input], outputs=output)\n","\n","#     # Compile the model\n","#     model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n","\n","#     # Fit the model\n","#     model.fit(X_train, y_train,\n","#         epochs=10,\n","#         #batch_size=32\n","#     )\n","\n","#     # Evaluate the model\n","#     score = model.evaluate(X_val, y_val)\n","#     scores.append(score)\n","\n","# # scores now contains your validation scores for each fold of the cross-validation\n","# # you can compute the average (and possibly standard deviation) of these scores to get a sense of how stable your model is across different folds\n","\n","# # Convert the list of scores to a NumPy array\n","# # Note: if you used multiple metrics during model evaluation,\n","# # adjust indexing in the following lines accordingly\n","# scores = np.array(scores)\n","\n","# # Calculate the mean and standard deviation of the scores\n","# mean_score = np.mean(scores[:, 1])  # Assuming accuracy is in the second position\n","# std_score = np.std(scores[:, 1])  # Assuming accuracy is in the second position\n","\n","# # Print the mean and standard deviation\n","# print(f'Mean validation accuracy over {n_folds}-fold cross-validation: {mean_score * 100:.2f}%')\n","# print(f'Standard deviation: {std_score * 100:.2f}%')\n","\n","# # Plot a histogram of the scores\n","# plt.hist(scores[:, 1], bins=10)  # Assuming accuracy is in the second position\n","# plt.title(f'Histogram of validation accuracy over {n_folds}-fold cross-validation')\n","# plt.xlabel('Validation Accuracy')\n","# plt.ylabel('Count')\n","# plt.show()\n"]},{"cell_type":"markdown","source":["## 8 leads"],"metadata":{"id":"FwgcqSzAbKOZ"}},{"cell_type":"code","source":["# Extract only the first three leads from every ECG signal\n","df_cleaned['signal'] = df_cleaned['signal'].apply(lambda signal: signal[:, :8])\n","\n","# Define the ECG branch of the model\n","ecg_input = layers.Input(shape=(2500, 8))  # Adjust to match the number of leads\n","ecg_layer = layers.Conv1D(64, 7, activation='relu')(ecg_input)\n","ecg_layer = layers.MaxPooling1D(3)(ecg_layer)\n","ecg_layer = layers.Conv1D(64, 7, activation='relu')(ecg_layer)\n","ecg_layer = layers.MaxPooling1D(3)(ecg_layer)\n","ecg_layer = layers.Dropout(0.5)(ecg_layer)\n","ecg_layer = layers.Flatten()(ecg_layer)\n","\n","# Add a couple of Dense layers\n","output = layers.Dense(64, activation='relu')(ecg_layer)\n","output = layers.Dropout(0.5)(output)\n","output = layers.Dense(y_train.shape[1], activation='softmax')(output)\n","\n","# Build the model\n","model = tf.keras.Model(inputs=[ecg_input], outputs=output)\n","\n","# Compile the model\n","model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n","\n","# Print the model summary\n","model.summary()\n","\n","# Split the data into training and test sets\n","X_train, X_test, y_train, y_test = train_test_split(df_cleaned['signal'].tolist(), y, test_size=0.2, random_state=1)\n","\n","# Further split the training data into training and validation sets\n","X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=1)  # 0.25 x 0.8 = 0.2\n","\n","# Convert the lists to numpy arrays\n","X_train = np.array(X_train)\n","X_val = np.array(X_val)\n","X_test = np.array(X_test)\n","\n","# Fit the model\n","history_8 = model.fit([X_train], y_train, epochs=50, validation_data=([X_val], y_val))\n","\n","test_loss, test_accuracy = model.evaluate(X_test, y_test)\n","\n","print(f\"Test Loss: {test_loss}\")\n","print(f\"Test Accuracy: {test_accuracy}\")"],"metadata":{"id":"13E3TJQFbepF","executionInfo":{"status":"aborted","timestamp":1690804696172,"user_tz":-120,"elapsed":14,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 4 leads"],"metadata":{"id":"R0_C7Ct6bNx1"}},{"cell_type":"code","source":["# Extract only the first three leads from every ECG signal\n","df_cleaned['signal'] = df_cleaned['signal'].apply(lambda signal: signal[:, :4])\n","\n","# Define the ECG branch of the model\n","ecg_input = layers.Input(shape=(2500, 4))  # Adjust to match the number of leads\n","ecg_layer = layers.Conv1D(64, 7, activation='relu')(ecg_input)\n","ecg_layer = layers.MaxPooling1D(3)(ecg_layer)\n","ecg_layer = layers.Conv1D(64, 7, activation='relu')(ecg_layer)\n","ecg_layer = layers.MaxPooling1D(3)(ecg_layer)\n","ecg_layer = layers.Dropout(0.5)(ecg_layer)\n","ecg_layer = layers.Flatten()(ecg_layer)\n","\n","# Add a couple of Dense layers\n","output = layers.Dense(64, activation='relu')(ecg_layer)\n","output = layers.Dropout(0.5)(output)\n","output = layers.Dense(y_train.shape[1], activation='softmax')(output)\n","\n","# Build the model\n","model = tf.keras.Model(inputs=[ecg_input], outputs=output)\n","\n","# Compile the model\n","model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n","\n","# Print the model summary\n","model.summary()\n","\n","# Split the data into training and test sets\n","X_train, X_test, y_train, y_test = train_test_split(df_cleaned['signal'].tolist(), y, test_size=0.2, random_state=1)\n","\n","# Further split the training data into training and validation sets\n","X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=1)  # 0.25 x 0.8 = 0.2\n","\n","# Convert the lists to numpy arrays\n","X_train = np.array(X_train)\n","X_val = np.array(X_val)\n","X_test = np.array(X_test)\n","\n","# Fit the model\n","history_4 = model.fit([X_train], y_train, epochs=50, validation_data=([X_val], y_val))\n","\n","test_loss, test_accuracy = model.evaluate(X_test, y_test)\n","\n","print(f\"Test Loss: {test_loss}\")\n","print(f\"Test Accuracy: {test_accuracy}\")"],"metadata":{"id":"_qNJ8PipcemY","executionInfo":{"status":"aborted","timestamp":1690804696172,"user_tz":-120,"elapsed":14,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 1 lead (II)"],"metadata":{"id":"j4xMWaKQbPc_"}},{"cell_type":"code","source":["# Extract only the first three leads from every ECG signal\n","df_cleaned['signal'] = df_cleaned['signal'].apply(lambda signal: signal[:, :1])\n","\n","# Define the ECG branch of the model\n","ecg_input = layers.Input(shape=(2500, 1))  # Adjust to match the number of leads\n","ecg_layer = layers.Conv1D(64, 7, activation='relu')(ecg_input)\n","ecg_layer = layers.MaxPooling1D(3)(ecg_layer)\n","ecg_layer = layers.Conv1D(64, 7, activation='relu')(ecg_layer)\n","ecg_layer = layers.MaxPooling1D(3)(ecg_layer)\n","ecg_layer = layers.Dropout(0.5)(ecg_layer)\n","ecg_layer = layers.Flatten()(ecg_layer)\n","\n","# Add a couple of Dense layers\n","output = layers.Dense(64, activation='relu')(ecg_layer)\n","output = layers.Dropout(0.5)(output)\n","output = layers.Dense(y_train.shape[1], activation='softmax')(output)\n","\n","# Build the model\n","model = tf.keras.Model(inputs=[ecg_input], outputs=output)\n","\n","# Compile the model\n","model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n","\n","# Print the model summary\n","model.summary()\n","\n","# Split the data into training and test sets\n","X_train, X_test, y_train, y_test = train_test_split(df_cleaned['signal'].tolist(), y, test_size=0.2, random_state=1)\n","\n","# Further split the training data into training and validation sets\n","X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=1)  # 0.25 x 0.8 = 0.2\n","\n","# Convert the lists to numpy arrays\n","X_train = np.array(X_train)\n","X_val = np.array(X_val)\n","X_test = np.array(X_test)\n","\n","# Fit the model\n","history_1 = model.fit([X_train], y_train, epochs=50, validation_data=([X_val], y_val))\n","\n","test_loss, test_accuracy = model.evaluate(X_test, y_test)\n","\n","print(f\"Test Loss: {test_loss}\")\n","print(f\"Test Accuracy: {test_accuracy}\")"],"metadata":{"id":"yl5yMfWyciyw","executionInfo":{"status":"aborted","timestamp":1690804696172,"user_tz":-120,"elapsed":14,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def plot_history(histories, key='categorical_accuracy'):\n","    plt.figure(figsize=(16,10))\n","    for name, history in histories:\n","        val = plt.plot(history.epoch, history.history['val_'+key],\n","                       '--', label=name.title()+' Val')\n","        plt.plot(history.epoch, history.history[key], color=val[0].get_color(),\n","                 label=name.title()+' Train')\n","\n","    plt.xlabel('Epochs')\n","    plt.ylabel(key.replace('_',' ').title())\n","    plt.legend()\n","\n","    plt.xlim([0,max(history.epoch)])\n","\n","# Assuming `history1`, `history2`, `history3`, `history4` are your histories of your models\n","plot_history([('12_lead', history_12),\n","              ('8_lead', history_8),\n","              ('4_lead', history_4),\n","              ('1_lead', history_1)])\n"],"metadata":{"id":"GwilMl1ef9j5","executionInfo":{"status":"aborted","timestamp":1690804696173,"user_tz":-120,"elapsed":14,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def plot_history(histories, key='categorical_accuracy'):\n","    plt.figure(figsize=(16,10))\n","    for name, history in histories:\n","        plt.plot(history.epoch, history.history[key], label=name.title()+' Train')\n","\n","    plt.xlabel('Epochs')\n","    plt.ylabel(key.replace('_',' ').title())\n","    plt.legend()\n","\n","    plt.xlim([0,max(history.epoch)])\n","\n","# Assuming `history1`, `history2`, `history3`, `history4` are your histories of your models\n","plot_history([('12_lead', history_12),\n","              ('8_lead', history_8),\n","              ('4_lead', history_4),\n","              ('1_lead', history_1)])\n"],"metadata":{"id":"yy-YZQZih_lB","executionInfo":{"status":"aborted","timestamp":1690804696173,"user_tz":-120,"elapsed":14,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def plot_history(histories, key='categorical_accuracy'):\n","    plt.figure(figsize=(16,10))\n","    for name, history in histories:\n","        plt.plot(history.epoch, history.history['val_'+key], label=name.title()+' Val')\n","\n","    plt.xlabel('Epochs')\n","    plt.ylabel(key.replace('_',' ').title())\n","    plt.legend()\n","\n","    plt.xlim([0,max(history.epoch)])\n","\n","# Assuming `history1`, `history2`, `history3`, `history4` are your histories of your models\n","plot_history([('12_lead', history_12),\n","              ('8_lead', history_8),\n","              ('4_lead', history_4),\n","              ('1_lead', history_1)])\n"],"metadata":{"id":"dWn-XPumiEY-","executionInfo":{"status":"aborted","timestamp":1690804696173,"user_tz":-120,"elapsed":14,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hh_xhdmgueGe"},"source":["## RNN test"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"l-BtX8CMueGv","executionInfo":{"status":"aborted","timestamp":1690804696173,"user_tz":-120,"elapsed":14,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"outputs":[],"source":["\n","# # Define your data\n","# X = np.array(df_cleaned['signal'].tolist())\n","# y = df_cleaned.drop(['record_name', 'signal', 'age', 'sex'], axis=1)\n","\n","# # Define the LSTM model\n","# from tensorflow.keras import layers\n","# from tensorflow.keras.models import Model\n","\n","# def residual_block(X, filters):\n","#     X_shortcut = X\n","#     X = layers.Conv1D(filters, kernel_size=5, strides=1, padding='same')(X)\n","#     X = layers.BatchNormalization()(X)\n","#     X = layers.Activation('relu')(X)\n","#     X = layers.Conv1D(filters, kernel_size=5, strides=1, padding='same')(X)\n","#     X = layers.BatchNormalization()(X)\n","#     X_shortcut = layers.Conv1D(filters, kernel_size=1, strides=1, padding='same')(X_shortcut)\n","#     X_shortcut = layers.BatchNormalization()(X_shortcut)\n","#     X = layers.Add()([X, X_shortcut])\n","#     X = layers.Activation('relu')(X)\n","#     return X\n","\n","# def resnet(input_shape, classes):\n","#     X_input = layers.Input(input_shape)\n","#     X = residual_block(X_input, 64)\n","#     X = layers.MaxPooling1D(pool_size=2)(X)\n","#     X = residual_block(X, 128)\n","#     X = layers.MaxPooling1D(pool_size=2)(X)\n","#     X = residual_block(X, 256)\n","#     X = layers.MaxPooling1D(pool_size=2)(X)\n","#     X = layers.Flatten()(X)\n","#     X = layers.Dense(classes, activation='softmax')(X)\n","#     model = Model(inputs = X_input, outputs = X)\n","#     return model\n","\n","# # Get input shape from the train data\n","# input_shape = (X_ecg_train.shape[1], X_ecg_train.shape[2])\n","\n","# # Create the model\n","# resnet_model = resnet(input_shape, y.shape[1])\n","# resnet_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n","\n","# # Fit the model\n","# resnet_model.fit(X_ecg_train, y_train, epochs=10)\n","\n","\n","\n"]},{"cell_type":"code","source":["# def identity_block(X, f, filters):\n","#     F1, F2 = filters\n","\n","#     X_shortcut = X\n","\n","#     X = layers.Conv1D(filters = F1, kernel_size = 1, strides = 1, padding = 'valid')(X)\n","#     X = layers.BatchNormalization()(X)\n","#     X = layers.Activation('relu')(X)\n","\n","#     X = layers.Conv1D(filters = F2, kernel_size = f, strides = 1, padding = 'same')(X)\n","#     X = layers.BatchNormalization()(X)\n","#     X = layers.Dropout(0.5)(X)  # Adding dropout layer\n","\n","#     X = layers.Add()([X, X_shortcut])\n","#     X = layers.Activation('relu')(X)\n","\n","#     return X\n","\n","# def convolutional_block(X, f, filters, s = 2):\n","#     F1, F2 = filters\n","\n","#     X_shortcut = X\n","\n","#     X = layers.Conv1D(F1, 1, strides = s)(X)\n","#     X = layers.BatchNormalization()(X)\n","#     X = layers.Activation('relu')(X)\n","\n","#     X = layers.Conv1D(filters = F2, kernel_size = f, strides = 1, padding = 'same')(X)\n","#     X = layers.BatchNormalization()(X)\n","#     X = layers.Dropout(0.65)(X)  # Adding dropout layer\n","\n","#     X_shortcut = layers.Conv1D(filters = F2, kernel_size = 1, strides = s, padding = 'valid')(X_shortcut)\n","#     X_shortcut = layers.BatchNormalization()(X_shortcut)\n","\n","#     X = layers.Add()([X, X_shortcut])\n","#     X = layers.Activation('relu')(X)\n","\n","#     return X\n","\n","# input_shape = X_ecg_train[0].shape\n","\n","# X_input = layers.Input(input_shape)\n","\n","# X = layers.Conv1D(64, 7, strides=2, padding='same')(X_input)\n","# X = layers.BatchNormalization()(X)\n","# X = layers.Activation('relu')(X)\n","# X = layers.MaxPooling1D(3, strides=2)(X)\n","\n","# X = convolutional_block(X, f = 3, filters = [64, 64], s = 1)\n","# X = identity_block(X, 3, [64, 64])\n","\n","# X = convolutional_block(X, f = 3, filters = [128, 128])\n","# X = identity_block(X, 3, [128, 128])\n","\n","# X = layers.AveragePooling1D(2)(X)\n","# X = layers.Flatten()(X)\n","# X = layers.Dense(5, activation='softmax')(X)\n","\n","# model = Model(inputs = X_input, outputs = X, name='ResNet50')\n","\n","# from keras.optimizers import Adam\n","# opt = Adam(lr=0.0001)\n","# model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])\n","\n","# # model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n","\n","# model.fit(X_ecg_train, y_train, epochs=100)\n"],"metadata":{"id":"w8LhsYvbpzQN","executionInfo":{"status":"aborted","timestamp":1690804696173,"user_tz":-120,"elapsed":14,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# # Evaluate the model on the test set\n","# test_loss, test_accuracy = model.evaluate(X_ecg_test, y_test)\n","\n","# print(f\"Test Loss: {test_loss}\")\n","# print(f\"Test Accuracy: {test_accuracy}\")"],"metadata":{"id":"VYjRaqtpomCz","executionInfo":{"status":"aborted","timestamp":1690804696174,"user_tz":-120,"elapsed":15,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# from sklearn.metrics import roc_auc_score, classification_report\n","\n","# # Ensure your data is correctly shaped. If your data preparation step is correct,\n","# # X_ecg_test should already have the shape of (num_instances, 1000, 12).\n","# # In case it doesn't, reshape it as necessary.\n","\n","# # Predict with the reshaped data\n","# y_pred = resnet_model.predict(X_ecg_test)\n","\n","# # Convert the predictions from probabilities to binary outputs (0 and 1)\n","# # This is necessary for multi-label classification\n","# y_pred_binary = np.where(y_pred > 0.5, 1, 0)\n","\n","# # ROC AUC\n","# roc_auc = roc_auc_score(y_test, y_pred, average='samples')  # Multi-label case\n","# print(f'ROC AUC Score: {roc_auc}')\n","\n","# # Classification Report\n","# # ['CD']\t['HYP']\t['MI']\t['NORM']\t['STTC']\n","# target_names = ['CD','HYP','MI','NORM','STTC']\n","# #target_names = ['CD','MI','NORM','STTC']\n","# print(classification_report(y_test, y_pred_binary, target_names=target_names))\n"],"metadata":{"id":"nN-uW_XYpN4B","executionInfo":{"status":"aborted","timestamp":1690804696174,"user_tz":-120,"elapsed":14,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# from sklearn.metrics import roc_curve, auc\n","# from sklearn.preprocessing import label_binarize\n","# from itertools import cycle\n","# import matplotlib.pyplot as plt\n","\n","# y_test_array = y_test.values\n","\n","# n_classes = y_test.shape[1]\n","\n","# # Compute ROC curve and ROC area for each class\n","# fpr = dict()\n","# tpr = dict()\n","# roc_auc = dict()\n","# for i in range(n_classes):\n","#     fpr[i], tpr[i], _ = roc_curve(y_test_array[:, i], y_pred[:, i])\n","#     roc_auc[i] = auc(fpr[i], tpr[i])\n","\n","\n","# # Plot all ROC curvesplt.figure()\n","# for i, color in zip(range(n_classes), cycle(['purple', 'darkorange', 'black', 'red', 'green'])):\n","#     plt.plot(fpr[i], tpr[i], color=color, lw=2,\n","#              label='ROC curve of class {0} (area = {1:0.2f})'\n","#              ''.format(target_names[i], roc_auc[i]))  # replace 'i' with 'target_names[i]'\n","\n","# plt.plot([0, 1], [0, 1], 'k--', lw=2)\n","# plt.xlim([0.0, 1.0])\n","# plt.ylim([0.0, 1.05])\n","# plt.xlabel('False Positive Rate')\n","# plt.ylabel('True Positive Rate')\n","# plt.title('Some extension of Receiver operating characteristic to multi-class')\n","# plt.legend(loc=\"lower right\")\n","# plt.show()\n"],"metadata":{"id":"4wIFMpmIo94T","executionInfo":{"status":"aborted","timestamp":1690804696175,"user_tz":-120,"elapsed":15,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_mFK0IopueGw"},"source":["## Transformer Test"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IfD9oZXzueGw","executionInfo":{"status":"aborted","timestamp":1690804696175,"user_tz":-120,"elapsed":15,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"outputs":[],"source":["# def transformer_encoder(inputs, head_size, num_heads, ff_dim, dropout=0):\n","#     # Normalization and Attention\n","#     x = layers.LayerNormalization(epsilon=1e-6)(inputs)\n","#     x = layers.MultiHeadAttention(\n","#         key_dim=head_size, num_heads=num_heads, dropout=dropout\n","#     )(x, x)\n","#     x = layers.Dropout(dropout)(x)\n","#     res = x + inputs\n","\n","#     # Feed Forward Part\n","#     x = layers.LayerNormalization(epsilon=1e-6)(res)\n","#     x = layers.Conv1D(filters=ff_dim, kernel_size=1, activation=\"relu\")(x)\n","#     x = layers.Dropout(dropout)(x)\n","#     x = layers.Conv1D(filters=inputs.shape[-1], kernel_size=1)(x)\n","#     return x + res\n","\n","# inputs = layers.Input(shape=(2500, 12))\n","# x = transformer_encoder(inputs, head_size=256, num_heads=4, ff_dim=4)\n","# x = layers.GlobalAveragePooling1D(data_format=\"channels_first\")(x)\n","# outputs = layers.Dense(5, activation=\"softmax\")(x)  # Adjusted this line\n","\n","# model = tf.keras.Model(inputs=inputs, outputs=outputs)\n","# model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n","\n","# model.fit(X_ecg_train, y_train,\n","#     epochs=10,\n","#     #batch_size=32\n","# )\n"]},{"cell_type":"code","source":[],"metadata":{"id":"DiaG9W6I2tE6","executionInfo":{"status":"aborted","timestamp":1690804696176,"user_tz":-120,"elapsed":16,"user":{"displayName":"Alex Chap","userId":"17206052553996143533"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_K06gZmIueGw"},"source":["todo:\n"," - complete preprocessing -> normalization, Noise Reduction, Outlier Removal,Data Augmentation,downsampling, invert?\n"," - convert signal to spectogram 2D? (not 1D CNN raw data anymore, can be generated with STFT, 2D CNN) 1D simpler but 2D may perform better\n"," - remove diseases because accuracy is poor\n"," - rajouter age et sexe?\n"," - CNN prep, build, model train, evaluate\n"," - RNN\n"," - Transofrmer\n","\n","- checker la normalisation\n","- passer en 250 sample rate"]},{"cell_type":"markdown","metadata":{"id":"VIhyyO1dueGx"},"source":["Done:\n","- remove last beat (when 0 volt)"]},{"cell_type":"markdown","metadata":{"id":"EtS6ywnCueGx"},"source":[]}],"metadata":{"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.11"},"colab":{"provenance":[],"machine_shape":"hm","gpuType":"T4"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}